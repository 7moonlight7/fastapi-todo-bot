import aiohttp
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from tgbot.keyboards.inline import registration, tasks, what_change_task, status, status2, logout
from tgbot.states import Registration, Login, Tg_Id, Task, ChangeTask, ChangeTaskAll, \
    DeleteTask

API_URL = {'registration': "http://127.0.0.1:8000/registration/",
           'login': "http://127.0.0.1:8000/login/",
           'add_task': "http://127.0.0.1:8000/add_task/",
           'get_list': "http://127.0.0.1:8000/get_list/",
           'change_name': 'http://127.0.0.1:8000/change_name/',
           'change_description': 'http://127.0.0.1:8000/change_description/',
           'change_status': 'http://127.0.0.1:8000/change_status/',
           'change_all': 'http://127.0.0.1:8000/change_all/',
           'delete': 'http://127.0.0.1:8000/delete/'}

user = Router()


@user.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç‚Äë–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä. –ü–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–µ–ª–∞, —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å",
        reply_markup=registration)


@user.callback_query(F.data == 'reg')
async def registration_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è üìù')
    await state.set_state(Registration.name)


@user.message(Registration.name)
async def registration_password(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîí (–æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ):")
    await state.set_state(Registration.password)


@user.message(Registration.password)
async def process_registration(message: Message, state: FSMContext):
    user_data = await state.get_data()
    name = user_data['name']
    password = message.text
    tg_id = message.from_user.id

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL['registration'], json={
            'tg_id': tg_id,
            'name': name,
            'password': password,
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res.get('success'):
                    user_id = res.get('user_id')
                    await message.answer("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ", reply_markup=tasks)
                    await state.set_state(Tg_Id.authorized)
                    await state.update_data(tg_id=tg_id, authorized=True, user_id=user_id)
            else:
                await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@user.callback_query(F.data == 'login')
async def login_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –≤—Ö–æ–¥–∞ üë§')
    await state.clear()
    await state.set_state(Login.name)


@user.message(Login.name)
async def login_password(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîë:")
    await state.set_state(Login.password)


@user.message(Login.password)
async def process_login(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_name = user_data['name']
    password = message.text
    tg_id = message.from_user.id

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL['login'], json={
            'tg_id': tg_id,
            'name': user_name,
            'password': password
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res.get('success'):
                    user_id = res.get('user_id')
                    await message.answer("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!", reply_markup=tasks)
                    await state.set_state(Tg_Id.authorized)
                    await state.update_data(tg_id=tg_id, authorized=True, user_id=user_id)
                    return
                else:
                    await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â—ë —Ä–∞–∑.')
            else:
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                                     reply_markup=registration)


@user.callback_query(F.data == 'add_task')
async def name_task(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get('authorized'):
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.",
            reply_markup=registration)
        return

    await callback.message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:')
    await state.set_state(Task.name)


@user.message(Task.name)
async def description_task(message: Message, state: FSMContext):
    await state.update_data(task_name=message.text)
    await message.answer('üñäÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')
    await state.set_state(Task.description)


@user.message(Task.description)
async def add_task(message: Message, state: FSMContext):
    data = await state.get_data()
    tg_id = message.from_user.id
    user_id = data.get('user_id')
    task_name = data.get('task_name')
    description = message.text

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL['add_task'], json={
            'name': task_name,
            'description': description,
            'user_id': user_id,
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res.get('success'):
                    await message.answer('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëç', reply_markup=tasks)

            else:
                await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
    await state.clear()
    await state.set_state(Tg_Id.authorized)
    await state.update_data(tg_id=tg_id, authorized=True, user_id=user_id)


@user.callback_query(F.data == 'show_list')
async def show_list(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tg_id = callback.from_user.id
    user_id = data.get('user_id')

    if user_id is None:
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    if not data.get('authorized'):
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.",
            reply_markup=registration)
        return

    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL['get_list'], params={
            'user_id': user_id
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res:
                    response_text = '–í–∞—à–∏ –∑–∞–¥–∞—á–∏ \n'
                    for task in res:
                        if not task['is_completed']:
                            is_completed = '–ù–µ—Ç'
                        else:
                            is_completed = '–î–∞'
                        response_text += f"{task['task_number']}. {task['task_name']}: {task['description']}. –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {is_completed} \n"

                else:
                    response_text = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á'
                await callback.message.answer(response_text, reply_markup=tasks)
            else:
                await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    await state.clear()
    await state.set_state(Tg_Id.authorized)
    await state.update_data(tg_id=tg_id, authorized=True, user_id=user_id)


@user.callback_query(F.data == 'rewrite_task')
async def choose_task(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tg_id = callback.from_user.id
    user_id = data.get('user_id')
    if not data.get('authorized'):
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.",
            reply_markup=registration)
        return

    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL['get_list'], params={
            'user_id': user_id
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res:
                    response_text = '–í–∞—à–∏ –∑–∞–¥–∞—á–∏ \n'
                    for task in res:
                        if not task['is_completed']:
                            is_completed = '–ù–µ—Ç'
                        else:
                            is_completed = '–î–∞'
                        response_text += f"{task['task_number']}. {task['task_name']}: {task['description']}. –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {is_completed} \n"
                else:
                    response_text = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á'
                await callback.message.answer(response_text)

            else:
                await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await state.clear()
    await state.set_state(Tg_Id.authorized)
    await state.update_data(tg_id=tg_id, authorized=True, user_id=user_id)

    await callback.message.answer('üìã –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.')
    await state.set_state(ChangeTask.number)


@user.message(ChangeTask.number)
async def what_change(message: Message, state: FSMContext):
    await state.update_data(task_number=message.text)
    await message.answer('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∑–∞–¥–∞—á–µ? üîÑ', reply_markup=what_change_task)


@user.callback_query(F.data == 'change_name')
async def process_change_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')
    await state.set_state(ChangeTask.name)


@user.message(ChangeTask.name)
async def change_name(message: Message, state: FSMContext):
    data = await state.get_data()
    task_number = data.get('task_number')
    tg_id = message.from_user.id
    new_task_name = message.text
    user_id = data.get('user_id')

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL['change_name'], json={
            'tg_id': tg_id,
            'task_number': task_number,
            'new_task_name': new_task_name
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res.get('success'):
                    await message.answer('‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=tasks)

            else:
                await message.answer('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏!', reply_markup=tasks)

    await state.clear()
    await state.set_state(Tg_Id.authorized)
    await state.update_data(tg_id=tg_id, authorized=True, user_id=user_id)


@user.callback_query(F.data == 'change_description')
async def process_change_description(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üñäÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')
    await state.set_state(ChangeTask.description)


@user.message(ChangeTask.description)
async def change_description(message: Message, state: FSMContext):
    data = await state.get_data()
    task_number = data.get('task_number')
    tg_id = message.from_user.id
    new_task_description = message.text
    user_id = data.get('user_id')

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL['change_description'], json={
            'tg_id': tg_id,
            'task_number': task_number,
            'new_task_description': new_task_description
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res.get('success'):
                    await message.answer('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=tasks)

            else:
                await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏!', reply_markup=tasks)

    await state.clear()
    await state.set_state(Tg_Id.authorized)
    await state.update_data(tg_id=tg_id, authorized=True, user_id=user_id)


@user.callback_query(F.data == 'status')
async def process_change_is_completed(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ? –í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=status)


@user.callback_query(F.data == 'ready')
async def complete_or_not(callback: CallbackQuery, state: FSMContext):
    status = True
    data = await state.get_data()
    task_number = data.get('task_number')
    tg_id = callback.from_user.id
    user_id = data.get('user_id')

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL['change_status'], json={
            'tg_id': tg_id,
            'task_number': task_number,
            'status': status
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res.get('success'):
                    await callback.message.answer('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!', reply_markup=tasks)

            else:
                await callback.message.answer('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏!',
                                              reply_markup=tasks)

    await state.clear()
    await state.set_state(Tg_Id.authorized)
    await state.update_data(tg_id=tg_id, authorized=True, user_id=user_id)


@user.callback_query(F.data == 'not_ready')
async def complete_or_not(callback: CallbackQuery, state: FSMContext):
    status = False
    data = await state.get_data()
    task_number = data.get('task_number')
    tg_id = callback.from_user.id
    user_id = data.get('user_id')

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL['change_status'], json={
            'tg_id': tg_id,
            'task_number': task_number,
            'status': status
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res.get('success'):
                    await callback.message.answer('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!', reply_markup=tasks)

            else:
                await callback.message.answer('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏!',
                                              reply_markup=tasks)

    await state.clear()
    await state.set_state(Tg_Id.authorized)
    await state.update_data(tg_id=tg_id, authorized=True, user_id=user_id)


@user.callback_query(F.data == 'change_all')
async def process_change_all_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:')
    await state.set_state(ChangeTaskAll.name)


@user.message(ChangeTaskAll.name)
async def process_change_all_description(message: Message, state: FSMContext):
    await state.update_data(all_new_name=message.text)
    await message.answer('üñäÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:')
    await state.set_state(ChangeTaskAll.description)


@user.message(ChangeTaskAll.description)
async def process_change_all_status(message: Message, state: FSMContext):
    await state.update_data(all_new_description=message.text)
    await message.answer('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ? –í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=status2)


@user.callback_query(F.data == 'ready2')
async def change_full_task(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tg_id = callback.from_user.id
    task_number = data.get('task_number')
    task_name_new = data.get('all_new_name')
    task_description_new = data.get('all_new_description')
    new_status = True
    user_id = data.get('user_id')

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL['change_all'], json={
            'tg_id': tg_id,
            'task_number': task_number,
            'new_task_name': task_name_new,
            'new_task_description': task_description_new,
            'status': new_status
        }) as resp:

            if resp.status == 200:
                res = await resp.json()
                if res.get('success'):
                    await callback.message.answer('üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É!')

            else:
                await callback.message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏!',
                                              reply_markup=tasks)

    await state.clear()
    await state.set_state(Tg_Id.authorized)
    await state.update_data(tg_id=tg_id, authorized=True, user_id=user_id)

    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL['get_list'], params={
            'user_id': user_id
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res:
                    response_text = '–ù–æ–≤—ã–π –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: \n'
                    for task in res:
                        if not task['is_completed']:
                            is_completed = '–ù–µ—Ç'
                        else:
                            is_completed = '–î–∞'
                        response_text += f"{task['task_number']}. {task['task_name']}: {task['description']}. –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {is_completed} \n"
                else:
                    response_text = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á'
                await callback.message.answer(response_text, reply_markup=tasks)
            else:
                await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@user.callback_query(F.data == 'not_ready2')
async def change_full_task(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tg_id = callback.from_user.id
    task_number = data.get('task_number')
    task_name_new = data.get('all_new_name')
    task_description_new = data.get('all_new_description')
    new_status = False
    user_id = data.get('user_id')

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL['change_all'], json={
            'tg_id': tg_id,
            'task_number': task_number,
            'new_task_name': task_name_new,
            'new_task_description': task_description_new,
            'status': new_status
        }) as resp:

            if resp.status == 200:
                res = await resp.json()
                if res.get('success'):
                    await callback.message.answer('üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É!')

            else:
                await callback.message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏!',
                                              reply_markup=tasks)

    await state.clear()
    await state.set_state(Tg_Id.authorized)
    await state.update_data(tg_id=tg_id, authorized=True, user_id=user_id)

    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL['get_list'], params={
            'user_id': user_id
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res:
                    response_text = '–ù–æ–≤—ã–π –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: \n'
                    for task in res:
                        if not task['is_completed']:
                            is_completed = '–ù–µ—Ç'
                        else:
                            is_completed = '–î–∞'
                        response_text += f"{task['task_number']}. {task['task_name']}: {task['description']}. –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {is_completed} \n"
                else:
                    response_text = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á'
                await callback.message.answer(response_text, reply_markup=tasks)
            else:
                await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@user.callback_query(F.data == 'delete_task')
async def show_delete(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tg_id = callback.from_user.id
    user_id = data.get('user_id')
    if not data.get('authorized'):
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.",
            reply_markup=registration)
        return

    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL['get_list'], params={
            'user_id': user_id
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res:
                    response_text = '–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: \n'
                    for task in res:
                        if not task['is_completed']:
                            is_completed = '–ù–µ—Ç'
                        else:
                            is_completed = '–î–∞'
                        response_text += f"{task['task_number']}. {task['task_name']}: {task['description']}. –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {is_completed} \n"
                else:
                    response_text = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á'
                await callback.message.answer(response_text)
            else:
                await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await callback.message.answer('üìã –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:')
    await state.set_state(DeleteTask.number)


@user.message(DeleteTask.number)
async def delete_start(message: Message, state: FSMContext):
    data = await state.get_data()
    tg_id = message.from_user.id
    task_number = message.text
    user_id = data.get('user_id')

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL['delete'], json={
            'tg_id': tg_id,
            'task_number': task_number
        }) as resp:
            if resp.status == 200:
                res = await resp.json()
                if res.get('success'):
                    await message.answer('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', reply_markup=tasks)
                else:
                    await message.answer('‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
            else:
                await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
    await state.clear()
    await state.set_state(Tg_Id.authorized)
    await state.update_data(tg_id=tg_id, authorized=True, user_id=user_id)


@user.message(Command("menu"))
async def show_menu(message: Message):
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=tasks)


@user.message(Command("logout"))
async def process_logout(message: Message, state: FSMContext):
    await state.clear()

    await message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è? üö™", reply_markup=logout)


@user.callback_query(F.data == 'logout_yes')
async def logout_true(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start üëã")


@user.callback_query(F.data == 'logout_no')
async def logout_true(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ üòä", reply_markup=tasks)
